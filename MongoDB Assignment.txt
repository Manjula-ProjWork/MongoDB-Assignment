MongoDB Lab Assignments -Day 1


MongoDB Excercise in mongo shell


Database:

use mongo_practice

=======================================================================================================
Collection:

db.createCollection('movies');


=======================================================================================================
Insert Documents Queries:


db.movies.insertMany([{title:"Fight Club",writter:"Chuck Palahniuko",year:1999,actors:["Brad Pitt","Edward Norton"]},
{title:"Pulp Fiction",writter:"Quentin Tarantino",year:1994,actors:["John Travolta","Uma Thurman"]},
{title:"Inglorious Basterds",writer:"Quentin Tarantino",year:2009,actors:["Brad Pitt","Diane Kruger","Eli Roth"]},
{title:"The Hobbit: An Unexpected Journey",writter:"J.R.R. Tolkein",year:2012,franchise:"The Hobbit"},
{title:"The Hobbit: The Desolation of Smaug",writter:"J.R.R. Tolkein",year:2013,franchise:"The Hobbit"},
{title:"The Hobbit: The Battle of the Five Armies",writer:"J.R.R. Tolkein",year:2012,franchise:"The Hobbit",synopsis:"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."},
{title:"Pee Wee Herman's Big Adventure"},
{title:"Avatar"}
])

=======================================================================================================

1.Get all documents:

db.movies.find().pretty();

2.Get all documents with writer set to "Quentin Tarantino":

db.movies.find({writer:"Quentin Tarantino"}).pretty();

3.Get all documents where actors include "Brad Pitt":

db.movies.find({actors:"Brad Pitt"}).pretty();

4.Get all documents with franchise set to "The Hobbit":

db.movies.find({franchise:"The Hobbit"}).pretty();

5.Get all movies released in the 90s:

db.movies.find({year : {$gte :1990, $lt : 2000}}).pretty();

6.Get all movies released before the year 2000 or after 2010:

db.movies.find({$or: [{year: {$lt: 2000}}, {year: {$gt: 2010}}]}).pretty();

=======================================================================================================

Update Documents:

=======================================================================================================

1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."

     db.movies.update({_id:ObjectId("5f7311f935ddbe6174af5103")},{$set:{synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }});

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."

     db.movies.update({_id:ObjectId("5f7311f935ddbe6174af5104")},{$set:{synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }});

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"

     db.movies.update({title:"Pulp Fiction"},{$push:{actors:"Samuel L. Jackson"}} );

=======================================================================================================

Text Search:

=======================================================================================================

1.find all movies that have a synopsis that contains the word "Bilbo"
db.movies.createIndex( { synopsis: "text", description: "text" } )
db.movies.find( { $text: { $search: "Bilbo"} } );

2.find all movies that have a synopsis that contains the word "Gandalf"
db.movies.find( { $text: { $search: "Gandalf"} } );

3.find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]}).pretty();

4.find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]}).pretty();

5.find all movies that have a synopsis that contains the word "gold" and "dragon"
db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})

=======================================================================================================

Delete Documents:

=======================================================================================================

1.delete the movie "Pee Wee Herman's Big Adventure"
db.movies.remove({_id : ObjectId("5f7311f935ddbe6174af5106")})

2.delete the movie "Avatar"
db.movies.deleteOne({_id : ObjectId("5f7311f935ddbe6174af5107")});

=======================================================================================================
Relationships:

Insert the following documents into a users collection:
=======================================================================================================

Collection:
db.createCollection('users');

Insert Documents Queries:

1.username : GoodGuyGreg
first_name : "Good Guy"
last_name : "Greg"

db.users.insert({username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})


2.username : ScumbagSteve
full_name :
  first : "Scumbag"
  last : "Steve"

db.users.insert({username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})

=======================================================================================================

Insert the following documents into a posts collection:

=======================================================================================================


username : GoodGuyGreg
title : Passes out at party
body : Wakes up early and cleans house

db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})

username : GoodGuyGreg
title : Steals your identity
body : Raises your credit score

db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})

username : GoodGuyGreg
title : Reports a bug in your code
body : Sends you a Pull Request

db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})

username : ScumbagSteve
title : Borrows something
body : Sells it

db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})

username : ScumbagSteve
title : Borrows everything
body : The end

db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})

username : ScumbagSteve
title : Forks your repo on github
body : Sets to private

db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})

=======================================================================================================

Insert the following documents into a comments collection:

=======================================================================================================

username : GoodGuyGreg
comment : Hope you got a good deal!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

db.comments.insert({username:"GoodGuyGreg",comment:"Hope you got a good deal",post:ObjectId("5f75c5dabd53b8666d186b05")});



username : GoodGuyGreg
comment : What's mine is yours!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

db.comments.insert({username:"GoodGuyGreg",comment:"What's mine is yours",post:ObjectId("5f75c5fdbd53b8666d186b06")});




username : GoodGuyGreg
comment : Don't violate the licensing agreement!
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github

db.comments.insert({username:"GoodGuyGreg",comment:"Don't violate the licensing agreement!",post:ObjectId("5f75e8e3bd53b8666d186b08")});

username : ScumbagSteve
comment : It still isn't clean
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"

db.comments.insert({username:"ScumbagSteve",comment:"It still isn't clean",post:ObjectId("5f75c522bd53b8666d186b02")});

username : ScumbagSteve
comment : Denied your PR cause I found a hack
post : [post_obj_id]
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"

db.comments.insert({username:"ScumbagSteve",comment:"Denied your PR cause I found a hack",post:ObjectId("5f75c5a6bd53b8666d186b04")});


=========================================================================================================

1.find all users

db.users.find().pretty()

2.find all posts

db.posts.find().pretty()

3.find all posts that was authored by "GoodGuyGreg"

db.posts.find({username:"GoodGuyGreg"})

4.find all posts that was authored by "ScumbagSteve"

db.posts.find({username:"ScumbagSteve"})

5.find all comments

db.comments.find().pretty()

6.find all comments that was authored by "GoodGuyGreg"

db.comments.find({username:"GoodGuyGreg"})

7.find all comments that was authored by "ScumbagSteve"

db.comments.find({username:"ScumbagSteve"})

8.find all comments belonging to the post "Reports a bug in your code"
db.posts.aggregate([
{
$match: { title: 'Reports a bug in your code' }
},
{
$lookup: {
from: 'comments',
localField: '_id',
foreignField: 'post',
as: 'comments'
}
}
]).pretty();

========================================================================================================

MongoDB -Aggregation Exercises



Atlanda Population

1.db.zipcodes.find({city: "ATLANTA"}).pretty();

2.using $match:

db.zipcodes.aggregate([{$match : {city : "ATLANTA"}}]).pretty();

3.use $group to count the number of zip codes in Atlanta:

db.zipcodes.aggregate([ {$match: {city: "ATLANTA"}}, {$group: {_id: "$_id"}}, {$count: "zipCount"} ]);

4.use $group to find the total population in Atlanta:  

db.zipcodes.aggregate([ {$match: {city: "ATLANTA"}}, {$group:{_id:"$city", count:{$sum:"$pop"}}} ]);

Population By State:

1)use aggregation to calculate the total pop for each state: 

db.zipcodes.aggregate([ {$group:{_id:"$state", count:{$sum:"$pop"}}} ]);

2)sort by population: (Highest First)

db.zipcodes.aggregate([ {$sort: {"pop":-1}} ]);


3)Limit the results to just the first 3 results. Top 3 states in Pop: 
db.zipcodes.aggregate([ {$group:{_id:{state:"$state"}, count:{$sum:"$pop"}}},{$sort: {"count":-1}},{$limit:3} ]);

Populations by City:

1) Calculate the total pop for each city:

db.zipcodes.aggregate([ {$group:{_id:{city:"$city", state:"$state"}, count:{$sum:"$pop"}}} ]);


2)sort by population: (Highest First)

db.zipcodes.aggregate([ {$sort: {"pop":-1}} ]);


3)Limit the results to just the first 3 results. Top 3 cities in Pop:
db.zipcodes.aggregate([ {$group:{_id:{city:"$city"}, count:{$sum:"$pop"}}},{$sort: {"count":-1}},{$limit:3} ]);


4)top 3 cities in population in Texas:  

db.zipcodes.aggregate([ {$match: {state: "TX"}} , {$group:{_id:{city:"$city"}, count:{$sum:"$pop"}}},{$sort: {"count":-1}},{$limit:3} ]);

=======================================================================================================
Bonus:

1)Write a query to get the avg city population for each state:

db.zipcodes.aggregate( [{ $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },{ $group: { _id: "$_id.state", avgPopulation: { $avg: "$pop" } } } ] );


2)What are the top 3 states in terms of average city population?

db.zipcodes.aggregate( [{ $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },{ $group: { _id: "$_id.state", avgPopulation: { $avg: "$pop" } } }, {$sort: {"avgPopulation":-1}},{$limit:3} ] );

=======================================================================================================

MongoDB - Complex Queries:

1. To display all the documents in the collection restaurants:

db.addresses.find().pretty();

2. Display the fields id,name,borough and cuisine for all the documents in the collection restaurant:

db.addresses.find({},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty();

3. Display the fields id,name,borough and cuisine for all the documents in the collection restaurant, exclude the field _id:

db.addresses.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}).pretty();

4. Display the fields id,name,borough and zip code for all the documents in the collection restaurant, exclude the field _id:

db.addresses.find({},{restaurant_id:1,name:1,borough:1,"address.zipcode":1,_id:0});

5.Display the first 5 restaurant which is in the borough Bronx:

db.addresses.aggregate([ {$match: {borough: "Bronx" }}, {$limit:5} ]).pretty();

6.Display all the restaurants which is in borough Bronx: 

db.addresses.aggregate([ {$match: {borough: "Bronx" }} ]).pretty();

7.Display the next 5 restaurants after skipping first 5 which are in the borough Bronx:

db.addresses.aggregate([ {$match: {borough: "Bronx" }}, {$skip:5}, {$limit:5} ]).pretty();

8.Find the restaurants who achieved score more than 90:

db.addresses.find({grades : { $elemMatch:{"score":{$gt : 90}}}}).pretty();

9.Find the restaurants who achieved a score more than 80 but less than 100:

db.addresses.find({grades : { $elemMatch:{"score":{$gt : 80, $lt: 100}}}}).pretty();

10. Find the restaurants which locate in latitude value less than -95.754168:

db.addresses.find({"address.coord" : {$lt: -95.754168}}).pretty();

11.Find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168:

db.addresses.find({"cuisine" : {$ne :"American"},"grades.score": {$gt :70},"address.coord" : {$lt: -65.754168}}).pretty();

12.Find the restaurants that do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168:

db.addresses.find({"cuisine" : {$ne :"American"},"grades.score": {$gt :70},"address.coord" : {$lt: -65.754168}}).pretty();

13.Find the restaurants that do not prepare any cuisine of 'American' and achieved a grade point 'A' not belongs to the borough Brooklyn. Document must be displayed according to the cuisine in descending order:

db.addresses.find({"cuisine" : {$ne :"American"},"grades.grade":"A","borough": {$ne :"Brooklyn"}}).sort({"cuisine":-1}).pretty();

14.Find the id,name,borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name:

db.addresses.find({name: /^Wil/},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty();

15.Find the id,name,borough and cuisine for those restaurants which contain 'ces' as last three letters for its name:

db.addresses.find({name: /ces$/},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty();

16.Find the id,name,borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name:

db.addresses.find({name: /Reg/},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty();

17.Find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish:

db.addresses.find( {  "borough": "Bronx" ,  $or : [ { "cuisine" : "American " }, { "cuisine" : "Chinese" } ]  }  ).pretty();

18.Find the id,name,borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Booklyn:

db.addresses.find( {"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } );

19.Find the id,name,borough and cuisine for those restaurants which are not belong to the borough Staten Island or Queens or Bronxor Booklyn:

db.addresses.find( {"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}}, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } );

20.Find the id,name,borough and cuisine for those restaurants which achieved a score which is not more than 10:

db.addresses.find( {"grades.score" :  { $not:  {$gt : 10} } }, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty();

21.Find the id,name,borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil':

db.addresses.find( {$or: [{name: /^Wil/},{"$and": [{"cuisine" : {$ne :"American "}},{"cuisine" : {$ne :"Chinees"}}]} ]} ,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1} ).pretty();

22.Find the id,name and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of surver dates:

db.addresses.find({"grades.date": ISODate("2014-08-11T00:00:00Z"),"grades.grade":"A" ,"grades.score" : 11},{"restaurant_id" : 1,"name":1,"grades":1}).pretty();

23.Find the id,name and grades for those restaurants where the 2nd element of grades array contains a grade of "A' and score 9 on an ISODate "2014-08-11T00:00:00Z":

db.addresses.find({"grades.1.date": ISODate("2014-08-11T00:00:00Z"),"grades.1.grade":"A" ,"grades.1.score" : 9},{"restaurant_id" : 1,"name":1,"grades":1}).pretty();

24.Find the id,name,address and geographical location for those restaurants where the 2nd element of coord array contains a value which is more than 42 and upto 52:

db.addresses.find({"address.coord.1": {$gt : 42, $lte : 52}},{"restaurant_id" : 1,"name":1,"address":1,"coord":1}).pretty();

25. Arrange the name of the restaurants in ascending order along with all the columns:

db.addresses.find().sort({"name":1});

26. Arrange the name of the restaurants in descending order along with all the columns:

db.addresses.find().sort({"name":-1});

27. Arrange the name of cuisine in ascending order and for that same cuisine borough should be in descending order:

db.addresses.find().sort({"cuisine":1,"borough":-1}).pretty();

28. To know whether all the addresses contains the street or not:

db.addresses.find({"address.street" :{ $exists : true }}).pretty();

29. Select all documents in the restaurants collection where the coord field value is Double:

db.addresses.find( {"address.coord" :{$type : 1} } ).pretty();

30. Query which will select the id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7:

db.addresses.find({"grades.score" : {$mod : [7,0]}},{"restaurant_id" : 1,"name":1,"grades":1}).pretty();

31. Query to find the name, borough, longitude and latitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name:

db.addresses.find({name : /mon/i},{"name" : 1,"borough":1,"address.coord":1,"cuisine":1}).pretty();

32. Query to find the name, borough, longitude and latitude and cuisine for those restaurants which contains 'Mad' as first three letters of its name:

db.addresses.find({name : /^Mad/i},{"name" : 1,"borough":1,"address.coord":1,"cuisine":1}).pretty();


